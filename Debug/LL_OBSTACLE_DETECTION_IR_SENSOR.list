
LL_OBSTACLE_DETECTION_IR_SENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fe4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800116c  0800116c  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800116c  0800116c  00003004  2**0
                  CONTENTS
  4 .ARM          00000000  0800116c  0800116c  00003004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800116c  0800116c  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800116c  0800116c  0000216c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001170  08001170  00002170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001174  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00003004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00003004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002ed8  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ad4  00000000  00000000  00005f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003c0  00000000  00000000  000069e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002b6  00000000  00000000  00006da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a445  00000000  00000000  00007056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003175  00000000  00000000  0002149b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094141  00000000  00000000  00024610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b8751  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e38  00000000  00000000  000b8794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  000b95cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001154 	.word	0x08001154

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001154 	.word	0x08001154

080001c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f003 0307 	and.w	r3, r3, #7
 80001d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	4b0c      	ldr	r3, [pc, #48]	@ (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001de:	68ba      	ldr	r2, [r7, #8]
 80001e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80001e4:	4013      	ands	r3, r2
 80001e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80001f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001fa:	4a04      	ldr	r2, [pc, #16]	@ (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	60d3      	str	r3, [r2, #12]
}
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000214:	4b04      	ldr	r3, [pc, #16]	@ (8000228 <__NVIC_GetPriorityGrouping+0x18>)
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	0a1b      	lsrs	r3, r3, #8
 800021a:	f003 0307 	and.w	r3, r3, #7
}
 800021e:	4618      	mov	r0, r3
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	e000ed00 	.word	0xe000ed00

0800022c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	2b00      	cmp	r3, #0
 800023c:	db0b      	blt.n	8000256 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f003 021f 	and.w	r2, r3, #31
 8000244:	4907      	ldr	r1, [pc, #28]	@ (8000264 <__NVIC_EnableIRQ+0x38>)
 8000246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024a:	095b      	lsrs	r3, r3, #5
 800024c:	2001      	movs	r0, #1
 800024e:	fa00 f202 	lsl.w	r2, r0, r2
 8000252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	e000e100 	.word	0xe000e100

08000268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	6039      	str	r1, [r7, #0]
 8000272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000278:	2b00      	cmp	r3, #0
 800027a:	db0a      	blt.n	8000292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	b2da      	uxtb	r2, r3
 8000280:	490c      	ldr	r1, [pc, #48]	@ (80002b4 <__NVIC_SetPriority+0x4c>)
 8000282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000286:	0112      	lsls	r2, r2, #4
 8000288:	b2d2      	uxtb	r2, r2
 800028a:	440b      	add	r3, r1
 800028c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000290:	e00a      	b.n	80002a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4908      	ldr	r1, [pc, #32]	@ (80002b8 <__NVIC_SetPriority+0x50>)
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	f003 030f 	and.w	r3, r3, #15
 800029e:	3b04      	subs	r3, #4
 80002a0:	0112      	lsls	r2, r2, #4
 80002a2:	b2d2      	uxtb	r2, r2
 80002a4:	440b      	add	r3, r1
 80002a6:	761a      	strb	r2, [r3, #24]
}
 80002a8:	bf00      	nop
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	e000e100 	.word	0xe000e100
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b089      	sub	sp, #36	@ 0x24
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f003 0307 	and.w	r3, r3, #7
 80002ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002d0:	69fb      	ldr	r3, [r7, #28]
 80002d2:	f1c3 0307 	rsb	r3, r3, #7
 80002d6:	2b04      	cmp	r3, #4
 80002d8:	bf28      	it	cs
 80002da:	2304      	movcs	r3, #4
 80002dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002de:	69fb      	ldr	r3, [r7, #28]
 80002e0:	3304      	adds	r3, #4
 80002e2:	2b06      	cmp	r3, #6
 80002e4:	d902      	bls.n	80002ec <NVIC_EncodePriority+0x30>
 80002e6:	69fb      	ldr	r3, [r7, #28]
 80002e8:	3b03      	subs	r3, #3
 80002ea:	e000      	b.n	80002ee <NVIC_EncodePriority+0x32>
 80002ec:	2300      	movs	r3, #0
 80002ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f0:	f04f 32ff 	mov.w	r2, #4294967295
 80002f4:	69bb      	ldr	r3, [r7, #24]
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	43da      	mvns	r2, r3
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	401a      	ands	r2, r3
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000304:	f04f 31ff 	mov.w	r1, #4294967295
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	fa01 f303 	lsl.w	r3, r1, r3
 800030e:	43d9      	mvns	r1, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000314:	4313      	orrs	r3, r2
         );
}
 8000316:	4618      	mov	r0, r3
 8000318:	3724      	adds	r7, #36	@ 0x24
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
	...

08000324 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000328:	4b05      	ldr	r3, [pc, #20]	@ (8000340 <LL_RCC_HSE_Enable+0x1c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a04      	ldr	r2, [pc, #16]	@ (8000340 <LL_RCC_HSE_Enable+0x1c>)
 800032e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000332:	6013      	str	r3, [r2, #0]
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40023800 	.word	0x40023800

08000344 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000348:	4b07      	ldr	r3, [pc, #28]	@ (8000368 <LL_RCC_HSE_IsReady+0x24>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000350:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000354:	bf0c      	ite	eq
 8000356:	2301      	moveq	r3, #1
 8000358:	2300      	movne	r3, #0
 800035a:	b2db      	uxtb	r3, r3
}
 800035c:	4618      	mov	r0, r3
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	40023800 	.word	0x40023800

0800036c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000374:	4b06      	ldr	r3, [pc, #24]	@ (8000390 <LL_RCC_SetSysClkSource+0x24>)
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	f023 0203 	bic.w	r2, r3, #3
 800037c:	4904      	ldr	r1, [pc, #16]	@ (8000390 <LL_RCC_SetSysClkSource+0x24>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4313      	orrs	r3, r2
 8000382:	608b      	str	r3, [r1, #8]
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	40023800 	.word	0x40023800

08000394 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000398:	4b04      	ldr	r3, [pc, #16]	@ (80003ac <LL_RCC_GetSysClkSource+0x18>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	f003 030c 	and.w	r3, r3, #12
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40023800 	.word	0x40023800

080003b0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003b8:	4b06      	ldr	r3, [pc, #24]	@ (80003d4 <LL_RCC_SetAHBPrescaler+0x24>)
 80003ba:	689b      	ldr	r3, [r3, #8]
 80003bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80003c0:	4904      	ldr	r1, [pc, #16]	@ (80003d4 <LL_RCC_SetAHBPrescaler+0x24>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4313      	orrs	r3, r2
 80003c6:	608b      	str	r3, [r1, #8]
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	40023800 	.word	0x40023800

080003d8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80003e0:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <LL_RCC_SetAPB1Prescaler+0x24>)
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80003e8:	4904      	ldr	r1, [pc, #16]	@ (80003fc <LL_RCC_SetAPB1Prescaler+0x24>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4313      	orrs	r3, r2
 80003ee:	608b      	str	r3, [r1, #8]
}
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	40023800 	.word	0x40023800

08000400 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000408:	4b06      	ldr	r3, [pc, #24]	@ (8000424 <LL_RCC_SetAPB2Prescaler+0x24>)
 800040a:	689b      	ldr	r3, [r3, #8]
 800040c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000410:	4904      	ldr	r1, [pc, #16]	@ (8000424 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4313      	orrs	r3, r2
 8000416:	608b      	str	r3, [r1, #8]
}
 8000418:	bf00      	nop
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	40023800 	.word	0x40023800

08000428 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800042c:	4b05      	ldr	r3, [pc, #20]	@ (8000444 <LL_RCC_PLL_Enable+0x1c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a04      	ldr	r2, [pc, #16]	@ (8000444 <LL_RCC_PLL_Enable+0x1c>)
 8000432:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000436:	6013      	str	r3, [r2, #0]
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40023800 	.word	0x40023800

08000448 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800044c:	4b07      	ldr	r3, [pc, #28]	@ (800046c <LL_RCC_PLL_IsReady+0x24>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000454:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000458:	bf0c      	ite	eq
 800045a:	2301      	moveq	r3, #1
 800045c:	2300      	movne	r3, #0
 800045e:	b2db      	uxtb	r3, r3
}
 8000460:	4618      	mov	r0, r3
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40023800 	.word	0x40023800

08000470 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
 800047c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800047e:	4b0d      	ldr	r3, [pc, #52]	@ (80004b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000480:	685a      	ldr	r2, [r3, #4]
 8000482:	4b0d      	ldr	r3, [pc, #52]	@ (80004b8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000484:	4013      	ands	r3, r2
 8000486:	68f9      	ldr	r1, [r7, #12]
 8000488:	68ba      	ldr	r2, [r7, #8]
 800048a:	4311      	orrs	r1, r2
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	0192      	lsls	r2, r2, #6
 8000490:	430a      	orrs	r2, r1
 8000492:	4908      	ldr	r1, [pc, #32]	@ (80004b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000494:	4313      	orrs	r3, r2
 8000496:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000498:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80004a0:	4904      	ldr	r1, [pc, #16]	@ (80004b4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80004a8:	bf00      	nop
 80004aa:	3714      	adds	r7, #20
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr
 80004b4:	40023800 	.word	0x40023800
 80004b8:	ffbf8000 	.word	0xffbf8000

080004bc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004c4:	4b08      	ldr	r3, [pc, #32]	@ (80004e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004c8:	4907      	ldr	r1, [pc, #28]	@ (80004e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4313      	orrs	r3, r2
 80004ce:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004d0:	4b05      	ldr	r3, [pc, #20]	@ (80004e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4013      	ands	r3, r2
 80004d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004da:	68fb      	ldr	r3, [r7, #12]
}
 80004dc:	bf00      	nop
 80004de:	3714      	adds	r7, #20
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	40023800 	.word	0x40023800

080004ec <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80004f4:	4b08      	ldr	r3, [pc, #32]	@ (8000518 <LL_APB1_GRP1_EnableClock+0x2c>)
 80004f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80004f8:	4907      	ldr	r1, [pc, #28]	@ (8000518 <LL_APB1_GRP1_EnableClock+0x2c>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4313      	orrs	r3, r2
 80004fe:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000500:	4b05      	ldr	r3, [pc, #20]	@ (8000518 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000502:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4013      	ands	r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	bf00      	nop
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	40023800 	.word	0x40023800

0800051c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000524:	4b08      	ldr	r3, [pc, #32]	@ (8000548 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000526:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000528:	4907      	ldr	r1, [pc, #28]	@ (8000548 <LL_APB2_GRP1_EnableClock+0x2c>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4313      	orrs	r3, r2
 800052e:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000530:	4b05      	ldr	r3, [pc, #20]	@ (8000548 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000532:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4013      	ands	r3, r2
 8000538:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800053a:	68fb      	ldr	r3, [r7, #12]
}
 800053c:	bf00      	nop
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	40023800 	.word	0x40023800

0800054c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800054c:	b480      	push	{r7}
 800054e:	b087      	sub	sp, #28
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000556:	4a17      	ldr	r2, [pc, #92]	@ (80005b4 <LL_SYSCFG_SetEXTISource+0x68>)
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	b2db      	uxtb	r3, r3
 800055c:	3302      	adds	r3, #2
 800055e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	0c1b      	lsrs	r3, r3, #16
 8000566:	43db      	mvns	r3, r3
 8000568:	ea02 0103 	and.w	r1, r2, r3
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	fa93 f3a3 	rbit	r3, r3
 8000578:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d101      	bne.n	8000588 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000584:	2320      	movs	r3, #32
 8000586:	e003      	b.n	8000590 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	fab3 f383 	clz	r3, r3
 800058e:	b2db      	uxtb	r3, r3
 8000590:	461a      	mov	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	fa03 f202 	lsl.w	r2, r3, r2
 8000598:	4806      	ldr	r0, [pc, #24]	@ (80005b4 <LL_SYSCFG_SetEXTISource+0x68>)
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	b2db      	uxtb	r3, r3
 800059e:	430a      	orrs	r2, r1
 80005a0:	3302      	adds	r3, #2
 80005a2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80005a6:	bf00      	nop
 80005a8:	371c      	adds	r7, #28
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40013800 	.word	0x40013800

080005b8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <LL_FLASH_SetLatency+0x24>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f023 0207 	bic.w	r2, r3, #7
 80005c8:	4904      	ldr	r1, [pc, #16]	@ (80005dc <LL_FLASH_SetLatency+0x24>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4313      	orrs	r3, r2
 80005ce:	600b      	str	r3, [r1, #0]
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	40023c00 	.word	0x40023c00

080005e0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005e4:	4b04      	ldr	r3, [pc, #16]	@ (80005f8 <LL_FLASH_GetLatency+0x18>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f003 0307 	and.w	r3, r3, #7
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40023c00 	.word	0x40023c00

080005fc <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000604:	4b05      	ldr	r3, [pc, #20]	@ (800061c <LL_EXTI_EnableIT_0_31+0x20>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4904      	ldr	r1, [pc, #16]	@ (800061c <LL_EXTI_EnableIT_0_31+0x20>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4313      	orrs	r3, r2
 800060e:	600b      	str	r3, [r1, #0]
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	40013c00 	.word	0x40013c00

08000620 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000628:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800062a:	695a      	ldr	r2, [r3, #20]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4013      	ands	r3, r2
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	429a      	cmp	r2, r3
 8000634:	bf0c      	ite	eq
 8000636:	2301      	moveq	r3, #1
 8000638:	2300      	movne	r3, #0
 800063a:	b2db      	uxtb	r3, r3
}
 800063c:	4618      	mov	r0, r3
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	40013c00 	.word	0x40013c00

0800064c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000654:	4a04      	ldr	r2, [pc, #16]	@ (8000668 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6153      	str	r3, [r2, #20]
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40013c00 	.word	0x40013c00

0800066c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800067c:	4904      	ldr	r1, [pc, #16]	@ (8000690 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4313      	orrs	r3, r2
 8000682:	600b      	str	r3, [r1, #0]
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	40007000 	.word	0x40007000

08000694 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000698:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <LL_PWR_IsActiveFlag_VOS+0x24>)
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80006a4:	bf0c      	ite	eq
 80006a6:	2301      	moveq	r3, #1
 80006a8:	2300      	movne	r3, #0
 80006aa:	b2db      	uxtb	r3, r3
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40007000 	.word	0x40007000

080006bc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80006bc:	b480      	push	{r7}
 80006be:	b08b      	sub	sp, #44	@ 0x2c
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	fa93 f3a3 	rbit	r3, r3
 80006d6:	613b      	str	r3, [r7, #16]
  return result;
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d101      	bne.n	80006e6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80006e2:	2320      	movs	r3, #32
 80006e4:	e003      	b.n	80006ee <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	fab3 f383 	clz	r3, r3
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	2103      	movs	r1, #3
 80006f2:	fa01 f303 	lsl.w	r3, r1, r3
 80006f6:	43db      	mvns	r3, r3
 80006f8:	401a      	ands	r2, r3
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006fe:	6a3b      	ldr	r3, [r7, #32]
 8000700:	fa93 f3a3 	rbit	r3, r3
 8000704:	61fb      	str	r3, [r7, #28]
  return result;
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800070a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800070c:	2b00      	cmp	r3, #0
 800070e:	d101      	bne.n	8000714 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000710:	2320      	movs	r3, #32
 8000712:	e003      	b.n	800071c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000716:	fab3 f383 	clz	r3, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	fa01 f303 	lsl.w	r3, r1, r3
 8000724:	431a      	orrs	r2, r3
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	601a      	str	r2, [r3, #0]
}
 800072a:	bf00      	nop
 800072c:	372c      	adds	r7, #44	@ 0x2c
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000736:	b480      	push	{r7}
 8000738:	b08b      	sub	sp, #44	@ 0x2c
 800073a:	af00      	add	r7, sp, #0
 800073c:	60f8      	str	r0, [r7, #12]
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	68da      	ldr	r2, [r3, #12]
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	fa93 f3a3 	rbit	r3, r3
 8000750:	613b      	str	r3, [r7, #16]
  return result;
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d101      	bne.n	8000760 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800075c:	2320      	movs	r3, #32
 800075e:	e003      	b.n	8000768 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	fab3 f383 	clz	r3, r3
 8000766:	b2db      	uxtb	r3, r3
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	2103      	movs	r1, #3
 800076c:	fa01 f303 	lsl.w	r3, r1, r3
 8000770:	43db      	mvns	r3, r3
 8000772:	401a      	ands	r2, r3
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000778:	6a3b      	ldr	r3, [r7, #32]
 800077a:	fa93 f3a3 	rbit	r3, r3
 800077e:	61fb      	str	r3, [r7, #28]
  return result;
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000786:	2b00      	cmp	r3, #0
 8000788:	d101      	bne.n	800078e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800078a:	2320      	movs	r3, #32
 800078c:	e003      	b.n	8000796 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800078e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000790:	fab3 f383 	clz	r3, r3
 8000794:	b2db      	uxtb	r3, r3
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	431a      	orrs	r2, r3
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	60da      	str	r2, [r3, #12]
}
 80007a4:	bf00      	nop
 80007a6:	372c      	adds	r7, #44	@ 0x2c
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	691a      	ldr	r2, [r3, #16]
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	4013      	ands	r3, r2
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	bf0c      	ite	eq
 80007c8:	2301      	moveq	r3, #1
 80007ca:	2300      	movne	r3, #0
 80007cc:	b2db      	uxtb	r3, r3
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007da:	b480      	push	{r7}
 80007dc:	b083      	sub	sp, #12
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
 80007e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	619a      	str	r2, [r3, #24]
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007f6:	b480      	push	{r7}
 80007f8:	b083      	sub	sp, #12
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
 80007fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	041a      	lsls	r2, r3, #16
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	619a      	str	r2, [r3, #24]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <EXTI1_IRQHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void EXTI1_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  // This section is used to handle EXTI line 1 interrupts
  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8000818:	2002      	movs	r0, #2
 800081a:	f7ff ff01 	bl	8000620 <LL_EXTI_IsActiveFlag_0_31>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d014      	beq.n	800084e <EXTI1_IRQHandler+0x3a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8000824:	2002      	movs	r0, #2
 8000826:	f7ff ff11 	bl	800064c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_1 */
    // Check the state of GPIOA pin 1
    if(LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_1))
 800082a:	2102      	movs	r1, #2
 800082c:	4809      	ldr	r0, [pc, #36]	@ (8000854 <EXTI1_IRQHandler+0x40>)
 800082e:	f7ff ffbf 	bl	80007b0 <LL_GPIO_IsInputPinSet>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d005      	beq.n	8000844 <EXTI1_IRQHandler+0x30>
    {
      // If GPIOA pin 1 is HIGH, reset (turn off) the LEDs connected to GPIOD
      LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_12 | LL_GPIO_PIN_13 | LL_GPIO_PIN_14 | LL_GPIO_PIN_15);
 8000838:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800083c:	4806      	ldr	r0, [pc, #24]	@ (8000858 <EXTI1_IRQHandler+0x44>)
 800083e:	f7ff ffda 	bl	80007f6 <LL_GPIO_ResetOutputPin>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000842:	e004      	b.n	800084e <EXTI1_IRQHandler+0x3a>
      LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_12 | LL_GPIO_PIN_13 | LL_GPIO_PIN_14 | LL_GPIO_PIN_15 );
 8000844:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000848:	4803      	ldr	r0, [pc, #12]	@ (8000858 <EXTI1_IRQHandler+0x44>)
 800084a:	f7ff ffc6 	bl	80007da <LL_GPIO_SetOutputPin>
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40020000 	.word	0x40020000
 8000858:	40020c00 	.word	0x40020c00

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000860:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000864:	f7ff fe5a 	bl	800051c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000868:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800086c:	f7ff fe3e 	bl	80004ec <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000870:	2003      	movs	r0, #3
 8000872:	f7ff fca9 	bl	80001c8 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000876:	f7ff fccb 	bl	8000210 <__NVIC_GetPriorityGrouping>
 800087a:	4603      	mov	r3, r0
 800087c:	2200      	movs	r2, #0
 800087e:	210f      	movs	r1, #15
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fd1b 	bl	80002bc <NVIC_EncodePriority>
 8000886:	4603      	mov	r3, r0
 8000888:	4619      	mov	r1, r3
 800088a:	f04f 30ff 	mov.w	r0, #4294967295
 800088e:	f7ff fceb 	bl	8000268 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000892:	f000 f807 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000896:	f000 f84f 	bl	8000938 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // Enable EXTI line 1 interrupt
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_1);
 800089a:	2002      	movs	r0, #2
 800089c:	f7ff feae 	bl	80005fc <LL_EXTI_EnableIT_0_31>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <main+0x44>

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  // Configure the flash latency to 5 wait states
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 80008a8:	2005      	movs	r0, #5
 80008aa:	f7ff fe85 	bl	80005b8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 80008ae:	bf00      	nop
 80008b0:	f7ff fe96 	bl	80005e0 <LL_FLASH_GetLatency>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b05      	cmp	r3, #5
 80008b8:	d1fa      	bne.n	80008b0 <SystemClock_Config+0xc>
  {
  }
  // Set the voltage scaling to the lowest setting
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80008ba:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80008be:	f7ff fed5 	bl	800066c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 80008c2:	f7ff fd2f 	bl	8000324 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80008c6:	bf00      	nop
 80008c8:	f7ff fd3c 	bl	8000344 <LL_RCC_HSE_IsReady>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d1fa      	bne.n	80008c8 <SystemClock_Config+0x24>
  {

  }
  // Configure the PLL to use HSE, set multipliers and dividers
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 80008d2:	2300      	movs	r3, #0
 80008d4:	22a8      	movs	r2, #168	@ 0xa8
 80008d6:	2104      	movs	r1, #4
 80008d8:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80008dc:	f7ff fdc8 	bl	8000470 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80008e0:	f7ff fda2 	bl	8000428 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80008e4:	bf00      	nop
 80008e6:	f7ff fdaf 	bl	8000448 <LL_RCC_PLL_IsReady>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d1fa      	bne.n	80008e6 <SystemClock_Config+0x42>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80008f0:	bf00      	nop
 80008f2:	f7ff fecf 	bl	8000694 <LL_PWR_IsActiveFlag_VOS>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d0fa      	beq.n	80008f2 <SystemClock_Config+0x4e>
  {
  }
  // Configure the AHB, APB1, and APB2 prescalers
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff fd57 	bl	80003b0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000902:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8000906:	f7ff fd67 	bl	80003d8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 800090a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800090e:	f7ff fd77 	bl	8000400 <LL_RCC_SetAPB2Prescaler>
  // Select the PLL as the system clock source
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000912:	2002      	movs	r0, #2
 8000914:	f7ff fd2a 	bl	800036c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000918:	bf00      	nop
 800091a:	f7ff fd3b 	bl	8000394 <LL_RCC_GetSysClkSource>
 800091e:	4603      	mov	r3, r0
 8000920:	2b08      	cmp	r3, #8
 8000922:	d1fa      	bne.n	800091a <SystemClock_Config+0x76>
  {

  }
  // Initialize the 1ms tick
  LL_Init1msTick(168000000);
 8000924:	4803      	ldr	r0, [pc, #12]	@ (8000934 <SystemClock_Config+0x90>)
 8000926:	f000 fbd3 	bl	80010d0 <LL_Init1msTick>
  // Set the system core clock
  LL_SetSystemCoreClock(168000000);
 800092a:	4802      	ldr	r0, [pc, #8]	@ (8000934 <SystemClock_Config+0x90>)
 800092c:	f000 fbde 	bl	80010ec <LL_SetSystemCoreClock>
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	0a037a00 	.word	0x0a037a00

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800093e:	f107 0318 	add.w	r3, r7, #24
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	463b      	mov	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
 8000956:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000958:	2080      	movs	r0, #128	@ 0x80
 800095a:	f7ff fdaf 	bl	80004bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800095e:	2001      	movs	r0, #1
 8000960:	f7ff fdac 	bl	80004bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000964:	2008      	movs	r0, #8
 8000966:	f7ff fda9 	bl	80004bc <LL_AHB1_GRP1_EnableClock>

  // Initialize GPIOD pins (LEDs) to be LOW
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15);
 800096a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800096e:	4821      	ldr	r0, [pc, #132]	@ (80009f4 <MX_GPIO_Init+0xbc>)
 8000970:	f7ff ff41 	bl	80007f6 <LL_GPIO_ResetOutputPin>

  // Configure EXTI line 1 source to be GPIOA
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE1);
 8000974:	f44f 0170 	mov.w	r1, #15728640	@ 0xf00000
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff fde7 	bl	800054c <LL_SYSCFG_SetEXTISource>

  // Configure EXTI line 1 settings
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 800097e:	2302      	movs	r3, #2
 8000980:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000982:	2301      	movs	r3, #1
 8000984:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000986:	2300      	movs	r3, #0
 8000988:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 800098a:	2303      	movs	r3, #3
 800098c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800098e:	f107 0318 	add.w	r3, r7, #24
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f936 	bl	8000c04 <LL_EXTI_Init>

  // Configure GPIOA pin 1 settings (input mode, no pull-up/pull-down)
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_1, LL_GPIO_PULL_NO);
 8000998:	2200      	movs	r2, #0
 800099a:	2102      	movs	r1, #2
 800099c:	4816      	ldr	r0, [pc, #88]	@ (80009f8 <MX_GPIO_Init+0xc0>)
 800099e:	f7ff feca 	bl	8000736 <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_1, LL_GPIO_MODE_INPUT);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2102      	movs	r1, #2
 80009a6:	4814      	ldr	r0, [pc, #80]	@ (80009f8 <MX_GPIO_Init+0xc0>)
 80009a8:	f7ff fe88 	bl	80006bc <LL_GPIO_SetPinMode>

  // Configure GPIOD pins (LEDs) settings
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80009ac:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80009b0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009b2:	2301      	movs	r3, #1
 80009b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	480b      	ldr	r0, [pc, #44]	@ (80009f4 <MX_GPIO_Init+0xbc>)
 80009c8:	f000 fae6 	bl	8000f98 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  // Configure NVIC for EXTI line 1 interrupts
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80009cc:	f7ff fc20 	bl	8000210 <__NVIC_GetPriorityGrouping>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fc70 	bl	80002bc <NVIC_EncodePriority>
 80009dc:	4603      	mov	r3, r0
 80009de:	4619      	mov	r1, r3
 80009e0:	2007      	movs	r0, #7
 80009e2:	f7ff fc41 	bl	8000268 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 80009e6:	2007      	movs	r0, #7
 80009e8:	f7ff fc20 	bl	800022c <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ec:	bf00      	nop
 80009ee:	3720      	adds	r7, #32
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40020c00 	.word	0x40020c00
 80009f8:	40020000 	.word	0x40020000

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <NMI_Handler+0x4>

08000a04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <MemManage_Handler+0x4>

08000a14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <SystemInit+0x20>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a66:	4a05      	ldr	r2, [pc, #20]	@ (8000a7c <SystemInit+0x20>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ab8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a84:	f7ff ffea 	bl	8000a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a88:	480c      	ldr	r0, [pc, #48]	@ (8000abc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a8a:	490d      	ldr	r1, [pc, #52]	@ (8000ac0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000aa0:	4c0a      	ldr	r4, [pc, #40]	@ (8000acc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aae:	f000 fb2d 	bl	800110c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab2:	f7ff fed3 	bl	800085c <main>
  bx  lr    
 8000ab6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ab8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000ac4:	08001174 	.word	0x08001174
  ldr r2, =_sbss
 8000ac8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000acc:	20000020 	.word	0x20000020

08000ad0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC_IRQHandler>
	...

08000ad4 <LL_EXTI_EnableIT_0_31>:
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <LL_EXTI_EnableIT_0_31+0x20>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4904      	ldr	r1, [pc, #16]	@ (8000af4 <LL_EXTI_EnableIT_0_31+0x20>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	600b      	str	r3, [r1, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	40013c00 	.word	0x40013c00

08000af8 <LL_EXTI_DisableIT_0_31>:
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <LL_EXTI_DisableIT_0_31+0x24>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	43db      	mvns	r3, r3
 8000b08:	4904      	ldr	r1, [pc, #16]	@ (8000b1c <LL_EXTI_DisableIT_0_31+0x24>)
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	600b      	str	r3, [r1, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40013c00 	.word	0x40013c00

08000b20 <LL_EXTI_EnableEvent_0_31>:
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000b28:	4b05      	ldr	r3, [pc, #20]	@ (8000b40 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	4904      	ldr	r1, [pc, #16]	@ (8000b40 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	604b      	str	r3, [r1, #4]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	40013c00 	.word	0x40013c00

08000b44 <LL_EXTI_DisableEvent_0_31>:
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000b4e:	685a      	ldr	r2, [r3, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	43db      	mvns	r3, r3
 8000b54:	4904      	ldr	r1, [pc, #16]	@ (8000b68 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000b56:	4013      	ands	r3, r2
 8000b58:	604b      	str	r3, [r1, #4]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40013c00 	.word	0x40013c00

08000b6c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000b74:	4b05      	ldr	r3, [pc, #20]	@ (8000b8c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000b76:	689a      	ldr	r2, [r3, #8]
 8000b78:	4904      	ldr	r1, [pc, #16]	@ (8000b8c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	608b      	str	r3, [r1, #8]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	40013c00 	.word	0x40013c00

08000b90 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	4904      	ldr	r1, [pc, #16]	@ (8000bb4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	608b      	str	r3, [r1, #8]
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40013c00 	.word	0x40013c00

08000bb8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000bc2:	68da      	ldr	r2, [r3, #12]
 8000bc4:	4904      	ldr	r1, [pc, #16]	@ (8000bd8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	60cb      	str	r3, [r1, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	40013c00 	.word	0x40013c00

08000bdc <LL_EXTI_DisableFallingTrig_0_31>:
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000be6:	68da      	ldr	r2, [r3, #12]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	43db      	mvns	r3, r3
 8000bec:	4904      	ldr	r1, [pc, #16]	@ (8000c00 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	60cb      	str	r3, [r1, #12]
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	40013c00 	.word	0x40013c00

08000c04 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	791b      	ldrb	r3, [r3, #4]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d065      	beq.n	8000ce4 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d06b      	beq.n	8000cf8 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	795b      	ldrb	r3, [r3, #5]
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d01c      	beq.n	8000c62 <LL_EXTI_Init+0x5e>
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	dc25      	bgt.n	8000c78 <LL_EXTI_Init+0x74>
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d002      	beq.n	8000c36 <LL_EXTI_Init+0x32>
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d00b      	beq.n	8000c4c <LL_EXTI_Init+0x48>
 8000c34:	e020      	b.n	8000c78 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff82 	bl	8000b44 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff45 	bl	8000ad4 <LL_EXTI_EnableIT_0_31>
          break;
 8000c4a:	e018      	b.n	8000c7e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff51 	bl	8000af8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff60 	bl	8000b20 <LL_EXTI_EnableEvent_0_31>
          break;
 8000c60:	e00d      	b.n	8000c7e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ff34 	bl	8000ad4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff55 	bl	8000b20 <LL_EXTI_EnableEvent_0_31>
          break;
 8000c76:	e002      	b.n	8000c7e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	73fb      	strb	r3, [r7, #15]
          break;
 8000c7c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	799b      	ldrb	r3, [r3, #6]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d038      	beq.n	8000cf8 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	799b      	ldrb	r3, [r3, #6]
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d01c      	beq.n	8000cc8 <LL_EXTI_Init+0xc4>
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	dc25      	bgt.n	8000cde <LL_EXTI_Init+0xda>
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d002      	beq.n	8000c9c <LL_EXTI_Init+0x98>
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d00b      	beq.n	8000cb2 <LL_EXTI_Init+0xae>
 8000c9a:	e020      	b.n	8000cde <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff9b 	bl	8000bdc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff5e 	bl	8000b6c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000cb0:	e022      	b.n	8000cf8 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff6a 	bl	8000b90 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff79 	bl	8000bb8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000cc6:	e017      	b.n	8000cf8 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff4d 	bl	8000b6c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff6e 	bl	8000bb8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000cdc:	e00c      	b.n	8000cf8 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
            break;
 8000ce2:	e009      	b.n	8000cf8 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff05 	bl	8000af8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff26 	bl	8000b44 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <LL_GPIO_SetPinMode>:
{
 8000d02:	b480      	push	{r7}
 8000d04:	b08b      	sub	sp, #44	@ 0x2c
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	60f8      	str	r0, [r7, #12]
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	fa93 f3a3 	rbit	r3, r3
 8000d1c:	613b      	str	r3, [r7, #16]
  return result;
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d101      	bne.n	8000d2c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000d28:	2320      	movs	r3, #32
 8000d2a:	e003      	b.n	8000d34 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fab3 f383 	clz	r3, r3
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	2103      	movs	r1, #3
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	401a      	ands	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d44:	6a3b      	ldr	r3, [r7, #32]
 8000d46:	fa93 f3a3 	rbit	r3, r3
 8000d4a:	61fb      	str	r3, [r7, #28]
  return result;
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000d56:	2320      	movs	r3, #32
 8000d58:	e003      	b.n	8000d62 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5c:	fab3 f383 	clz	r3, r3
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	601a      	str	r2, [r3, #0]
}
 8000d70:	bf00      	nop
 8000d72:	372c      	adds	r7, #44	@ 0x2c
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <LL_GPIO_SetPinOutputType>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	401a      	ands	r2, r3
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	fb01 f303 	mul.w	r3, r1, r3
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	605a      	str	r2, [r3, #4]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <LL_GPIO_SetPinSpeed>:
{
 8000dac:	b480      	push	{r7}
 8000dae:	b08b      	sub	sp, #44	@ 0x2c
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa93 f3a3 	rbit	r3, r3
 8000dc6:	613b      	str	r3, [r7, #16]
  return result;
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000dd2:	2320      	movs	r3, #32
 8000dd4:	e003      	b.n	8000dde <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	fab3 f383 	clz	r3, r3
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2103      	movs	r1, #3
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	401a      	ands	r2, r3
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dee:	6a3b      	ldr	r3, [r7, #32]
 8000df0:	fa93 f3a3 	rbit	r3, r3
 8000df4:	61fb      	str	r3, [r7, #28]
  return result;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d101      	bne.n	8000e04 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8000e00:	2320      	movs	r3, #32
 8000e02:	e003      	b.n	8000e0c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e06:	fab3 f383 	clz	r3, r3
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	431a      	orrs	r2, r3
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	609a      	str	r2, [r3, #8]
}
 8000e1a:	bf00      	nop
 8000e1c:	372c      	adds	r7, #44	@ 0x2c
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <LL_GPIO_SetPinPull>:
{
 8000e26:	b480      	push	{r7}
 8000e28:	b08b      	sub	sp, #44	@ 0x2c
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	60f8      	str	r0, [r7, #12]
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	68da      	ldr	r2, [r3, #12]
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	fa93 f3a3 	rbit	r3, r3
 8000e40:	613b      	str	r3, [r7, #16]
  return result;
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d101      	bne.n	8000e50 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000e4c:	2320      	movs	r3, #32
 8000e4e:	e003      	b.n	8000e58 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	fab3 f383 	clz	r3, r3
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	2103      	movs	r1, #3
 8000e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	401a      	ands	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e68:	6a3b      	ldr	r3, [r7, #32]
 8000e6a:	fa93 f3a3 	rbit	r3, r3
 8000e6e:	61fb      	str	r3, [r7, #28]
  return result;
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000e7a:	2320      	movs	r3, #32
 8000e7c:	e003      	b.n	8000e86 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e80:	fab3 f383 	clz	r3, r3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	60da      	str	r2, [r3, #12]
}
 8000e94:	bf00      	nop
 8000e96:	372c      	adds	r7, #44	@ 0x2c
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <LL_GPIO_SetAFPin_0_7>:
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b08b      	sub	sp, #44	@ 0x2c
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	6a1a      	ldr	r2, [r3, #32]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa93 f3a3 	rbit	r3, r3
 8000eba:	613b      	str	r3, [r7, #16]
  return result;
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8000ec6:	2320      	movs	r3, #32
 8000ec8:	e003      	b.n	8000ed2 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	fab3 f383 	clz	r3, r3
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	210f      	movs	r1, #15
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	401a      	ands	r2, r3
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee2:	6a3b      	ldr	r3, [r7, #32]
 8000ee4:	fa93 f3a3 	rbit	r3, r3
 8000ee8:	61fb      	str	r3, [r7, #28]
  return result;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8000ef4:	2320      	movs	r3, #32
 8000ef6:	e003      	b.n	8000f00 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efa:	fab3 f383 	clz	r3, r3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	fa01 f303 	lsl.w	r3, r1, r3
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	621a      	str	r2, [r3, #32]
}
 8000f0e:	bf00      	nop
 8000f10:	372c      	adds	r7, #44	@ 0x2c
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <LL_GPIO_SetAFPin_8_15>:
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b08b      	sub	sp, #44	@ 0x2c
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa93 f3a3 	rbit	r3, r3
 8000f36:	613b      	str	r3, [r7, #16]
  return result;
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8000f42:	2320      	movs	r3, #32
 8000f44:	e003      	b.n	8000f4e <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	fab3 f383 	clz	r3, r3
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	210f      	movs	r1, #15
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	401a      	ands	r2, r3
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f60:	6a3b      	ldr	r3, [r7, #32]
 8000f62:	fa93 f3a3 	rbit	r3, r3
 8000f66:	61fb      	str	r3, [r7, #28]
  return result;
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8000f72:	2320      	movs	r3, #32
 8000f74:	e003      	b.n	8000f7e <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8000f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f78:	fab3 f383 	clz	r3, r3
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	431a      	orrs	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000f8c:	bf00      	nop
 8000f8e:	372c      	adds	r7, #44	@ 0x2c
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa93 f3a3 	rbit	r3, r3
 8000fb6:	617b      	str	r3, [r7, #20]
  return result;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <LL_GPIO_Init+0x2e>
    return 32U;
 8000fc2:	2320      	movs	r3, #32
 8000fc4:	e003      	b.n	8000fce <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fab3 f383 	clz	r3, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000fd0:	e057      	b.n	8001082 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	4013      	ands	r3, r2
 8000fe0:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8000fe2:	6a3b      	ldr	r3, [r7, #32]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d049      	beq.n	800107c <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d003      	beq.n	8000ff8 <LL_GPIO_Init+0x60>
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d10d      	bne.n	8001014 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	6a39      	ldr	r1, [r7, #32]
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff fed3 	bl	8000dac <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	461a      	mov	r2, r3
 800100c:	6a39      	ldr	r1, [r7, #32]
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff feb4 	bl	8000d7c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	461a      	mov	r2, r3
 800101a:	6a39      	ldr	r1, [r7, #32]
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff02 	bl	8000e26 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d121      	bne.n	800106e <LL_GPIO_Init+0xd6>
 800102a:	6a3b      	ldr	r3, [r7, #32]
 800102c:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	fa93 f3a3 	rbit	r3, r3
 8001034:	60bb      	str	r3, [r7, #8]
  return result;
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d101      	bne.n	8001044 <LL_GPIO_Init+0xac>
    return 32U;
 8001040:	2320      	movs	r3, #32
 8001042:	e003      	b.n	800104c <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	fab3 f383 	clz	r3, r3
 800104a:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800104c:	2b07      	cmp	r3, #7
 800104e:	d807      	bhi.n	8001060 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	461a      	mov	r2, r3
 8001056:	6a39      	ldr	r1, [r7, #32]
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff21 	bl	8000ea0 <LL_GPIO_SetAFPin_0_7>
 800105e:	e006      	b.n	800106e <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	461a      	mov	r2, r3
 8001066:	6a39      	ldr	r1, [r7, #32]
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff56 	bl	8000f1a <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	461a      	mov	r2, r3
 8001074:	6a39      	ldr	r1, [r7, #32]
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fe43 	bl	8000d02 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	3301      	adds	r3, #1
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001088:	fa22 f303 	lsr.w	r3, r2, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1a0      	bne.n	8000fd2 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3728      	adds	r7, #40	@ 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	4a07      	ldr	r2, [pc, #28]	@ (80010cc <LL_InitTick+0x30>)
 80010b0:	3b01      	subs	r3, #1
 80010b2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <LL_InitTick+0x30>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <LL_InitTick+0x30>)
 80010bc:	2205      	movs	r2, #5
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80010d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ffdd 	bl	800109c <LL_InitTick>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80010f4:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <LL_SetSystemCoreClock+0x1c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000000 	.word	0x20000000

0800110c <__libc_init_array>:
 800110c:	b570      	push	{r4, r5, r6, lr}
 800110e:	4d0d      	ldr	r5, [pc, #52]	@ (8001144 <__libc_init_array+0x38>)
 8001110:	4c0d      	ldr	r4, [pc, #52]	@ (8001148 <__libc_init_array+0x3c>)
 8001112:	1b64      	subs	r4, r4, r5
 8001114:	10a4      	asrs	r4, r4, #2
 8001116:	2600      	movs	r6, #0
 8001118:	42a6      	cmp	r6, r4
 800111a:	d109      	bne.n	8001130 <__libc_init_array+0x24>
 800111c:	4d0b      	ldr	r5, [pc, #44]	@ (800114c <__libc_init_array+0x40>)
 800111e:	4c0c      	ldr	r4, [pc, #48]	@ (8001150 <__libc_init_array+0x44>)
 8001120:	f000 f818 	bl	8001154 <_init>
 8001124:	1b64      	subs	r4, r4, r5
 8001126:	10a4      	asrs	r4, r4, #2
 8001128:	2600      	movs	r6, #0
 800112a:	42a6      	cmp	r6, r4
 800112c:	d105      	bne.n	800113a <__libc_init_array+0x2e>
 800112e:	bd70      	pop	{r4, r5, r6, pc}
 8001130:	f855 3b04 	ldr.w	r3, [r5], #4
 8001134:	4798      	blx	r3
 8001136:	3601      	adds	r6, #1
 8001138:	e7ee      	b.n	8001118 <__libc_init_array+0xc>
 800113a:	f855 3b04 	ldr.w	r3, [r5], #4
 800113e:	4798      	blx	r3
 8001140:	3601      	adds	r6, #1
 8001142:	e7f2      	b.n	800112a <__libc_init_array+0x1e>
 8001144:	0800116c 	.word	0x0800116c
 8001148:	0800116c 	.word	0x0800116c
 800114c:	0800116c 	.word	0x0800116c
 8001150:	08001170 	.word	0x08001170

08001154 <_init>:
 8001154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001156:	bf00      	nop
 8001158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800115a:	bc08      	pop	{r3}
 800115c:	469e      	mov	lr, r3
 800115e:	4770      	bx	lr

08001160 <_fini>:
 8001160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001162:	bf00      	nop
 8001164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001166:	bc08      	pop	{r3}
 8001168:	469e      	mov	lr, r3
 800116a:	4770      	bx	lr
